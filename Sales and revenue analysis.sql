--ANALYSIS
SELECT * FROM CATEGORIES;
SELECT * FROM CUSTOMERS;
SELECT * FROM EMPLOYEE_TERRITORIES;
SELECT * FROM EMPLOYEES;
SELECT * FROM ORDER_DETAILS;
SELECT * FROM ORDERS;
SELECT * FROM PRODUCTS;
SELECT * FROM REGION;
SELECT * FROM SHIPPERS;
SELECT * FROM SUPPLIERS;
SELECT * FROM TERRITORIES;
SELECT * FROM US_STATES;

-----------------------------------CREATING A DATE TABLE------------------------------------
CREATE TABLE DATE_TABLE AS (
SELECT ORDER_DATE,
    DATE_PART('year', ORDER_DATE) AS YEAR,
	DATE_PART('quarter', ORDER_DATE) AS QUARTER,
	DATE_PART('month', ORDER_DATE) AS MONTH,
	DATE_PART('day', ORDER_DATE) AS DAY,
	DATE_PART('week', ORDER_DATE) AS WEEK,
	DATE_PART('dow', ORDER_DATE) AS WEEKDAY,
	DATE_PART('doy', ORDER_DATE) AS YEARDAY
FROM ORDERS);

--SELECT * FROM DATE_TABLE;

-------------------------------------CREATING REVENUE TABLE------------------------------------------------ 
CREATE TABLE Revenue AS (
SELECT
    ORDER_ID,
    PRODUCT_ID,
    UNIT_PRICE,
    QUANTITY,
    DISCOUNT,
    (UNIT_PRICE * QUANTITY) * (1 - DISCOUNT) AS Selling_price,
	(UNIT_PRICE * QUANTITY) * (DISCOUNT) AS DISCOUNT_VALUE	
FROM
    ORDER_DETAILS);

--DROP TABLE REVENUE;

SELECT * FROM REVENUE;

------------------------------------SALES AND REVENUE ANALYSIS--------------------------------------------------------

--Total revenue generated for each year/quarter/month.

SELECT YEAR,
	QUARTER,
	MONTH,
	SUM(SELLING_PRICE) AS TOTAL_REVENUE
FROM REVENUE
INNER JOIN ORDERS USING(ORDER_ID)
INNER JOIN DATE_TABLE USING (ORDER_DATE)
	GROUP BY 1,2,3
	ORDER BY 1,2,3;

--Top 10 products by total sales revenue.

SELECT PRODUCT_ID,
       SUM(SELLING_PRICE) AS TOTAL_REVENUE
FROM REVENUE
GROUP BY 1
ORDER BY TOTAL_REVENUE  DESC
LIMIT 10;

--Products with highest and lowest unit sales.

(SELECT PRODUCT_ID, 
	PRODUCT_NAME,
	SUM (QUANTITY) AS TOTAL_UNITS,
	'HIGHEST' AS CATEGORY
FROM REVENUE
INNER JOIN PRODUCTS USING (PRODUCT_ID)
GROUP BY 1,2
ORDER BY TOTAL_UNITS DESC
LIMIT 10)

UNION ALL

(SELECT PRODUCT_ID, 
	PRODUCT_NAME,
	SUM (QUANTITY) AS TOTAL_UNITS,
	'LOWEST' AS CATEGORY
FROM REVENUE
INNER JOIN PRODUCTS USING (PRODUCT_ID)
GROUP BY 1,2
ORDER BY TOTAL_UNITS 
LIMIT 10);

--Revenue contribution per product category 

SELECT CATEGORY_NAME,
	  (REVENUE/OVERALL_REVENUE)*100 AS REVENUE_CONTRIBUTION
FROM (
SELECT CATEGORY_NAME,
	SUM (SELLING_PRICE) AS REVENUE,
   (SELECT SUM (SELLING_PRICE) FROM REVENUE) AS OVERALL_REVENUE
FROM REVENUE
INNER JOIN PRODUCTS USING (PRODUCT_ID)
INNER JOIN CATEGORIES USING (CATEGORY_ID)
GROUP BY 1)
ORDER BY 2 DESC;

--Number of orders placed per month/quarter

SELECT YEAR,
	QUARTER,
	MONTH,
	COUNT (DISTINCT ORDER_ID) AS NUMBER_OF_ORDERS
FROM ORDERS 
INNER JOIN DATE_TABLE USING (ORDER_DATE)
	GROUP BY 1,2,3
	ORDER BY 1,2,3;

--Average order value (AOV) over time 
SELECT YEAR,
	QUARTER,
	MONTH,
	AVG(ORDER_VALUE) AS AOV
FROM (SELECT
    ORDER_ID,
    SUM(SELLING_PRICE) AS ORDER_VALUE
FROM
    REVENUE
GROUP BY 1
ORDER BY 1)
INNER JOIN ORDERS USING (ORDER_ID)
INNER JOIN DATE_TABLE USING (ORDER_DATE)
GROUP BY 1,2,3
ORDER BY 1,2,3;

--Sales breakdown by country 
SELECT SHIP_COUNTRY AS COUNTRY,
	SUM(SELLING_PRICE) AS TOTAL_SALES
FROM REVENUE
INNER JOIN ORDERS USING (ORDER_ID)
GROUP BY 1;

--Identify high-value customers

SELECT CUSTOMER_ID, 
	COMPANY_NAME, 
	CONTACT_NAME, 
	SUM(SELLING_PRICE) AS TOTAL_SALES
FROM REVENUE 
INNER JOIN ORDERS USING (ORDER_ID)
INNER JOIN CUSTOMERS USING (CUSTOMER_ID)
GROUP BY 1,2,3
ORDER BY TOTAL_SALES DESC
LIMIT 10;

--Average number of distinct products per order and Average number of products/quantity per order
SELECT AVG(TOTAL_QUANTITY) AS AVG_QUANTITY,
	AVG(PRODUCTS_PER_ORDER) AS AVG_NO_OF_PRODUCTS  
	FROM (
SELECT ORDER_ID,
	   SUM(QUANTITY) AS TOTAL_QUANTITY,
	COUNT (PRODUCT_ID) AS PRODUCTS_PER_ORDER   
FROM REVENUE
GROUP BY 1);

--Total value of discounts given 
SELECT
       SUM(DISCOUNT_VALUE) AS TOTAL_DISCOUNT 	   
FROM REVENUE
;

--Discount over time
SELECT YEAR,
	QUARTER,
	MONTH,
	SUM(DISCOUNT_VALUE) AS TOTAL_VALUE
FROM REVENUE
INNER JOIN ORDERS USING (ORDER_ID)
INNER JOIN DATE_TABLE USING (ORDER_DATE)
	GROUP BY 1,2,3
	ORDER BY 1,2,3;

--Discounts by products
SELECT PRODUCT_ID,
	   PRODUCT_NAME,
      SUM(DISCOUNT_VALUE) AS TOTAL_VALUE
FROM REVENUE
INNER JOIN PRODUCTS USING (PRODUCT_ID)
GROUP BY 1,2
ORDER BY 1,2;

--Discounts by Customer 
SELECT CUSTOMER_ID,
	   COMPANY_NAME,
      SUM(DISCOUNT_VALUE) AS TOTAL_VALUE
FROM REVENUE
INNER JOIN ORDERS USING (ORDER_ID)
INNER JOIN CUSTOMERS USING (CUSTOMER_ID)
GROUP BY 1,2
ORDER BY 1,2;

--Impact of Discount on AOV - Monthly AOV vs Discount
SELECT 
	MONTH,
	AVG(ORDER_VALUE) AS AOV,
	AVG(TOTAL_DISCOUNT_PERCENT) AS AVG_DISCOUNT_RATE
FROM (SELECT
    ORDER_ID,
    SUM(SELLING_PRICE) AS ORDER_VALUE,
	AVG(DISCOUNT) AS TOTAL_DISCOUNT_PERCENT
FROM
    REVENUE
GROUP BY 1
ORDER BY 1)
INNER JOIN ORDERS USING (ORDER_ID)
INNER JOIN DATE_TABLE USING (ORDER_DATE)
GROUP BY 1
ORDER BY 1;



